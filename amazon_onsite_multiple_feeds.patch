diff --git a/amazon_onsite.install b/amazon_onsite.install
new file mode 100644
index 0000000..25d7d15
--- /dev/null
+++ b/amazon_onsite.install
@@ -0,0 +1,26 @@
+<?php
+
+/**
+ * @file
+ * Update hooks for amazon_onsite.
+ */
+
+use Drupal\amazon_onsite\Entity\AopFeed;
+
+/**
+ * Migrates AOP feed settings from config settings to config entity.
+ */
+function amazon_onsite_update_8901() {
+  $config = \Drupal::config('amazon_onsite.settings');
+
+  AopFeed::create([
+    'id' => 'default_feed',
+    'channel_title' => $config->get('channel_title'),
+    'website_url' => $config->get('website_url'),
+    'language' => $config->get('language'),
+    'logo_path' => $config->get('logo_path'),
+    'feed_description' => $config->get('feed_description'),
+  ])->save();
+
+  return t('Amazon onsite feed settings have been migrated to config entity.');
+}
diff --git a/amazon_onsite.links.action.yml b/amazon_onsite.links.action.yml
index b6e7f06..c3510a0 100644
--- a/amazon_onsite.links.action.yml
+++ b/amazon_onsite.links.action.yml
@@ -1,3 +1,8 @@
+aop_feed.add_form_link:
+  route_name: entity.aop_feed.add_form
+  title: 'Add AOP feed'
+  appears_on:
+    - 'entity.aop_feed.collection'
 aop_feed_item.add_form:
   route_name: entity.aop_feed_item.add_form
   title: 'Add AOP feed item'
diff --git a/amazon_onsite.links.menu.yml b/amazon_onsite.links.menu.yml
index 977ecd0..b227f73 100644
--- a/amazon_onsite.links.menu.yml
+++ b/amazon_onsite.links.menu.yml
@@ -1,7 +1,7 @@
 amazon_onsite.settings:
   title: Amazon Onsite Publishing configuration
   description: Configure an AOP feed item entity type
-  route_name:  entity.aop_feed_item.settings
+  route_name:  entity.aop_feed.collection
   parent: system.admin_config_services
 entity.aop_feed_item.settings:
   title: Amazon Onsite Publishing feed items
diff --git a/amazon_onsite.routing.yml b/amazon_onsite.routing.yml
index 5e8c512..259dd94 100644
--- a/amazon_onsite.routing.yml
+++ b/amazon_onsite.routing.yml
@@ -8,6 +8,44 @@ amazon_onsite.settings:
   options:
     _admin_route: TRUE
 
+entity.aop_feed.collection:
+  path: '/admin/config/structure/aop-feeds'
+  defaults:
+    _entity_list: 'aop_feed'
+    _title: 'AOP Feeds'
+  requirements:
+    _permission: 'administer aop feeds'
+
+entity.aop_feed.add_form:
+  path: '/admin/config/structure/aop-feeds/add'
+  defaults:
+    _entity_form: aop_feed.add
+    _title: 'Add AOP Feed'
+  requirements:
+    _permission: 'add aop feed'
+  options:
+    _admin_route: TRUE
+
+entity.aop_feed.edit_form:
+  path: '/admin/config/structure/aop-feeds/{aop_feed}/edit'
+  defaults:
+    _entity_form: aop_feed.edit
+    _title: 'Edit AOP Feed'
+  requirements:
+    _permission: 'edit aop feed'
+  options:
+    _admin_route: TRUE
+
+entity.aop_feed.delete_form:
+  path: '/admin/config/structure/aop-feeds/{aop_feed}/delete'
+  defaults:
+    _entity_form: aop_feed.delete
+    _title: 'Delete AOP Feed'
+  requirements:
+    _permission: 'delete aop feed'
+  options:
+    _admin_route: TRUE
+
 entity.aop_feed_item.settings:
   path: 'admin/structure/aop-feed-item'
   defaults:
@@ -16,8 +54,8 @@ entity.aop_feed_item.settings:
   requirements:
     _permission: 'administer aop feed item'
 
-amazon_onsite.rss:
-  path: '/aop/rss'
+entity.aop_feed.canonical:
+  path: '/aop/{aop_feed}/rss.xml'
   defaults:
     _controller: '\Drupal\amazon_onsite\Controller\RssController::buildResponse'
   requirements:
diff --git a/config/schema/amazon_onsite.schema.yml b/config/schema/amazon_onsite.schema.yml
index 7c4dddd..c239b62 100644
--- a/config/schema/amazon_onsite.schema.yml
+++ b/config/schema/amazon_onsite.schema.yml
@@ -1,3 +1,26 @@
+amazon_onsite.aop_feed.*:
+  type: config_entity
+  label: 'AOP Feed'
+  mapping:
+    id:
+      type: string
+      label: 'ID'
+    channel_title:
+      type: string
+      label: 'Title'
+    website_url:
+      type: string
+      label: 'Website URL'
+    language:
+      type: string
+      label: 'Language'
+    logo_path:
+      type: 'string'
+      label: 'Channel logo'
+    feed_description:
+      type: 'string'
+      label: 'Feed description'
+
 amazon_onsite.settings:
   type: config_object
   label: 'Onsite settings'
diff --git a/src/AopFeedListBuilder.php b/src/AopFeedListBuilder.php
new file mode 100644
index 0000000..fbc07da
--- /dev/null
+++ b/src/AopFeedListBuilder.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace Drupal\amazon_onsite;
+
+use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
+use Drupal\Core\Entity\EntityInterface;
+
+/**
+ * Class AopFeedListBuilder.
+ *
+ * @package Drupal\amazon_onsite
+ */
+class AopFeedListBuilder extends ConfigEntityListBuilder {
+
+  /**
+   * {@inheritDoc}
+   */
+  public function buildHeader() {
+    $header['label'] = $this->t('Name');
+    $header['url'] = $this->t('URL');
+    return $header + parent::buildHeader();
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function buildRow(EntityInterface $entity) {
+    /** @var \Drupal\amazon_onsite\Entity\AopFeedInterface $entity */
+    $row['label'] = $entity->label();
+    $row['url'] = $entity->toUrl('canonical', ['absolute' => TRUE]);
+    return $row + parent::buildRow($entity);
+  }
+
+}
diff --git a/src/Controller/RssController.php b/src/Controller/RssController.php
index bc78071..cfc64ea 100644
--- a/src/Controller/RssController.php
+++ b/src/Controller/RssController.php
@@ -31,6 +31,13 @@ class RssController extends ControllerBase {
    */
   protected $renderer;
 
+  /**
+   * Entity type manager.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
   /**
    * {@inheritdoc}
    */
@@ -38,6 +45,7 @@ class RssController extends ControllerBase {
     $instance = parent::create($container);
     $instance->dateFormatter = $container->get('date.formatter');
     $instance->renderer = $container->get('renderer');
+    $instance->entityTypeManager = $container->get('entity_type.manager');
     return $instance;
   }
 
@@ -50,8 +58,8 @@ class RssController extends ControllerBase {
    * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
    * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
    */
-  public function buildResponse() {
-    $build = $this->build();
+  public function buildResponse(string $aop_feed) {
+    $build = $this->build($aop_feed);
     // Set up an empty response, so for example RSS can set the proper
     // Content-Type header.
     $response = new CacheableResponse('', 200);
@@ -78,14 +86,18 @@ class RssController extends ControllerBase {
   /**
    * Build a render array for the RSS feed.
    *
+   * @param string $id
+   *   The id of the aop_feed.
+   *
    * @return array
    *   An array as expected by drupal_render().
    *
    * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
    * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
    */
-  public function build() {
-    $config = $this->config('amazon_onsite.settings');
+  public function build($id) {
+    $feedStorage = $this->entityTypeManager->getStorage('aop_feed');
+    $entity = $feedStorage->load($id);
 
     $required_configs = [
       'channel_title',
@@ -95,19 +107,19 @@ class RssController extends ControllerBase {
     ];
 
     foreach ($required_configs as $required_config) {
-      if (empty($config->get($required_config))) {
+      if (empty($entity->get($required_config))) {
         throw new \Exception("$required_config needs to be set.");
       }
     }
 
     return [
       '#theme' => 'rss_feed',
-      '#title' => $config->get('channel_title'),
-      '#link' => $config->get('website_url'),
-      '#description' => $config->get('feed_description'),
-      '#langcode' => $config->get('language'),
+      '#title' => $entity->get('channel_title'),
+      '#link' => $entity->get('website_url'),
+      '#description' => $entity->get('feed_description'),
+      '#langcode' => $entity->get('language'),
       '#last_build_date' => $this->getLastBuildDate(),
-      '#logo_path' => $config->get('logo_path') ? file_create_url($config->get('logo_path')) : '',
+      '#logo_path' => $entity->get('logo_path') ? file_create_url($entity->get('logo_path')) : '',
       '#items' => $this->buildItems(),
     ];
   }
diff --git a/src/Entity/AopFeed.php b/src/Entity/AopFeed.php
new file mode 100644
index 0000000..e9edeb6
--- /dev/null
+++ b/src/Entity/AopFeed.php
@@ -0,0 +1,182 @@
+<?php
+
+namespace Drupal\amazon_onsite\Entity;
+
+use Drupal\Core\Config\Entity\ConfigEntityBase;
+
+/**
+ * Class AopFeed.
+ *
+ * @package Drupal\amazon_onsite\Entity
+ *
+ * @ConfigEntityType(
+ *   id = "aop_feed",
+ *   label = @Translation("AOP Feed"),
+ *   config_prefix = "aop_feed",
+ *   admin_permission = "administer aop feeds",
+ *   entity_keys = {
+ *     "id" = "id",
+ *     "label" = "label",
+ *   },
+ *   handlers = {
+ *     "list_builder" = "Drupal\amazon_onsite\AopFeedListBuilder",
+ *     "form" = {
+ *       "add" = "Drupal\amazon_onsite\Form\AopFeedForm",
+ *       "edit" = "Drupal\amazon_onsite\Form\AopFeedForm",
+ *       "delete" = "Drupal\amazon_onsite\Form\AopFeedDeleteForm",
+ *     },
+ *   },
+ *   links = {
+ *     "canonical" = "/aop/{aop_feed}/rss.xml",
+ *     "add-form" = "/admin/config/structure/aop_feed/add",
+ *     "edit-form" = "/admin/config/structure/aop_feed/{aop_feed}/edit",
+ *     "delete-form" = "/admin/config/structure/aop_feed/{aop_feed}/delete",
+ *   },
+ * )
+ */
+class AopFeed extends ConfigEntityBase implements AopFeedInterface {
+
+  /**
+   * The AOP Feed ID.
+   *
+   * @var string
+   */
+  public $id;
+
+  /**
+   * The AOP Feed title.
+   *
+   * @var string
+   */
+  public $title;
+
+  /**
+   * The AOP Feed channel title.
+   *
+   * @var string
+   */
+  public $channel_title;
+
+  /**
+   * The AOP Feed website_url.
+   *
+   * @var string
+   */
+  public $website_url;
+
+  /**
+   * The AOP Feed language.
+   *
+   * @var string
+   */
+  public $language;
+
+  /**
+   * The AOP Feed logo path.
+   *
+   * @var string
+   */
+  public $logo_path;
+
+  /**
+   * The AOP Feed description.
+   *
+   * @var string
+   */
+  public $feed_description;
+
+  /**
+   * Returns the feed title.
+   *
+   * @return string
+   */
+  public function label() {
+    return $this->getTitle();
+  }
+
+  public function setTitle(string $title) {
+    $this->set('channel_title', $title);
+    return $this;
+  }
+
+  public function getTitle() {
+    return $this->get('channel_title');
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function getWebsiteUrl() {
+    return $this->get('website_url');
+  }
+
+  public function setWebsiteUrl(string $url) {
+    $this->set('website_url', $url);
+    return $this;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function getDescription() {
+    return $this->get('feed_description');
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function setDescription(string $description) {
+    $this->set('feed_description', $description);
+    return $this;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function getLogoPath() {
+    return $this->get('logo_path');
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function setLogoPath(string $logoPath) {
+    $this->set('logo_path', $logoPath);
+    return $this;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function getLanguage() {
+    return $this->get('language');
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function setLanguage(string $language) {
+    $this->set('language', $language);
+    return $this;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function getUrl() {
+    return $this->toUrl('canonical', ['absolute' => TRUE])->toString();
+  }
+
+  /**
+   * Allowed languages codes for AOP Feed.
+   *
+   * @return array
+   *   The language codes.
+   */
+  public static function supportedLanguages() {
+    return [
+      'de-DE' => 'de-DE',
+    ];
+  }
+
+}
diff --git a/src/Entity/AopFeedInterface.php b/src/Entity/AopFeedInterface.php
new file mode 100644
index 0000000..b8546f0
--- /dev/null
+++ b/src/Entity/AopFeedInterface.php
@@ -0,0 +1,63 @@
+<?php
+
+namespace Drupal\amazon_onsite\Entity;
+
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
+
+/**
+ * Interface AopFeedInterface.
+ *
+ * @package Drupal\amazon_onsite\Entity
+ */
+interface AopFeedInterface extends ConfigEntityInterface {
+
+  /**
+   * Returns the AOP feed description.
+   *
+   * @return string
+   *   The description.
+   */
+  public function getDescription();
+
+  /**
+   * Sets the AOP feed description.
+   *
+   * @param string $description
+   *   The description.
+   *
+   * @return $this
+   */
+  public function setDescription(string $description);
+
+  /**
+   * Returns the path to the AOP feed logo.
+   *
+   * @return string
+   *   The path to the logo.
+   */
+  public function getLogoPath();
+
+  /**
+   * Sets the AOP feed logo path.
+   *
+   * @param string $logoPath
+   *   The logo path.
+   */
+  public function setLogoPath(string $logoPath);
+
+  /**
+   * Returns the ISO639-1 language code of the feed.
+   *
+   * @return string
+   *   ISO639-1 language code.
+   */
+  public function getLanguage();
+
+  /**
+   * Sets the ISO639-1 language of the feed.
+   *
+   * @param string $language
+   *   ISO639-1 language code.
+   */
+  public function setLanguage(string $language);
+}
diff --git a/src/Form/AopFeedDeleteForm.php b/src/Form/AopFeedDeleteForm.php
new file mode 100644
index 0000000..9d88d88
--- /dev/null
+++ b/src/Form/AopFeedDeleteForm.php
@@ -0,0 +1,45 @@
+<?php
+
+namespace Drupal\amazon_onsite\Form;
+
+use Drupal\Core\Entity\EntityConfirmFormBase;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Url;
+
+/**
+ * Class AopFeedDeleteForm.
+ *
+ * Builds a form to confirm the deletion of an AOP Feed config entity.
+ *
+ * @package Drupal\amazon_onsite\Form
+ */
+class AopFeedDeleteForm extends EntityConfirmFormBase {
+
+  /**
+   * {@inheritDoc}
+   */
+  public function getQuestion() {
+    return $this->t('Are you sure you want to delete AOP feed @label?', [
+      '@label' => $this->entity->label(),
+    ]);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function getCancelUrl() {
+    return new Url('entity.aop_feed.collection');
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    $this->entity->delete();
+    $this->messenger()->addMessage($this->t('The entity "@label" has been deleted.', [
+      '@label' => $this->entity->label(),
+    ]));
+    $form_state->setRedirectUrl($this->getCancelUrl());
+  }
+
+}
diff --git a/src/Form/SettingsForm.php b/src/Form/AopFeedForm.php
similarity index 72%
rename from src/Form/SettingsForm.php
rename to src/Form/AopFeedForm.php
index c9502d0..bb8295b 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/AopFeedForm.php
@@ -2,19 +2,20 @@
 
 namespace Drupal\amazon_onsite\Form;
 
+use Drupal\amazon_onsite\Entity\AopFeed;
 use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Extension\ModuleHandlerInterface;
-use Drupal\Core\File\FileSystemInterface;
-use Drupal\Core\Form\ConfigFormBase;
+use Drupal\Core\File\Exception\FileException;
+use Drupal\Core\File\FileSystemInterface;;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperManager;
-use Drupal\Core\Url;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
- * The settings form for amazon onsite module.
+ * The AOP feed form for amazon onsite module.
  */
-class SettingsForm extends ConfigFormBase {
+class AopFeedForm extends EntityForm {
 
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface module handler.
@@ -34,7 +35,6 @@ class SettingsForm extends ConfigFormBase {
    * {@inheritdoc}
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, FileSystemInterface $file_system) {
-    parent::__construct($config_factory);
     $this->moduleHandler = $module_handler;
     $this->fileSystem = $file_system;
   }
@@ -53,43 +53,36 @@ class SettingsForm extends ConfigFormBase {
   /**
    * {@inheritdoc}
    */
-  protected function getEditableConfigNames() {
-    return [
-      'amazon_onsite.settings',
+  public function form(array $form, FormStateInterface $form_state) {
+    $feedItem = $this->entity;
+
+    $form['id'] = [
+      '#type' => 'machine_name',
+      '#default_value' => $feedItem->id(),
+      '#machine_name' => [
+        'exists' => [$this, 'exist'],
+      ],
+      '#disabled' => !$feedItem->isNew(),
     ];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function getFormId() {
-    return 'amazon_onsite_settings_form';
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function buildForm(array $form, FormStateInterface $form_state) {
-    $config = $this->config('amazon_onsite.settings');
 
     $form['channel_title'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Title'),
-      '#default_value' => $config->get('channel_title'),
+      '#default_value' => $feedItem->label(),
       '#required' => TRUE,
     ];
     $form['website_url'] = [
       '#type' => 'url',
       '#title' => $this->t('Website URL'),
       '#description' => $this->t('The website url which is associated with this RSS channel. (HTTPS is required)'),
-      '#default_value' => $config->get('website_url'),
+      '#default_value' => $feedItem->getWebsiteUrl(),
       '#pattern' => 'https://.*',
       '#required' => TRUE,
     ];
     $form['feed_description'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Feed description'),
-      '#default_value' => $config->get('feed_description'),
+      '#default_value' => $feedItem->getDescription(),
       '#required' => TRUE,
     ];
     $form['logo'] = [
@@ -99,7 +92,7 @@ class SettingsForm extends ConfigFormBase {
     $form['logo']['logo_path'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Path to image'),
-      '#default_value' => $config->get('logo_path'),
+      '#default_value' => $feedItem->getLogoPath(),
     ];
     $form['logo']['logo_upload'] = [
       '#type' => 'file',
@@ -112,20 +105,20 @@ class SettingsForm extends ConfigFormBase {
     ];
 
     $form['language'] = [
-      '#type' => 'textfield',
+      '#type' => 'select',
+      '#options' => AopFeed::supportedLanguages(),
       '#title' => $this->t('Language'),
       '#description' => $this->t('ISO639-1 language string'),
-      '#default_value' => $config->get('language'),
-      '#disabled' => TRUE,
+      '#default_value' => $feedItem->getLanguage(),
     ];
     $form['channel_url'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Feed URL'),
-      '#default_value' => Url::fromRoute('amazon_onsite.rss', [], ['absolute' => TRUE])->toString(),
+      '#default_value' => $feedItem->getUrl(),
       '#disabled' => TRUE,
     ];
 
-    return parent::buildForm($form, $form_state);
+    return parent::form($form, $form_state);
   }
 
   /**
@@ -157,6 +150,12 @@ class SettingsForm extends ConfigFormBase {
         }
       }
     }
+
+    if ($form_state->getValue('language')) {
+      if (!in_array($form_state->getValue('language'), AopFeed::supportedLanguages())) {
+        $form_state->setErrorByName('language', $this->t('Language is invalid.'));
+      }
+    }
   }
 
   /**
@@ -196,7 +195,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * {@inheritdoc}
    */
-  public function submitForm(array &$form, FormStateInterface $form_state) {
+  public function save(array $form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
 
     try {
@@ -209,13 +208,44 @@ class SettingsForm extends ConfigFormBase {
       // Ignore.
     }
 
-    $this->config('amazon_onsite.settings')
+    $status = $this->entity
       ->set('channel_title', $form_state->getValue('channel_title'))
       ->set('website_url', $form_state->getValue('website_url'))
       ->set('feed_description', $form_state->getValue('feed_description'))
       ->set('language', $form_state->getValue('language'))
       ->set('logo_path', !empty($logo_path) ? $logo_path : $form_state->getValue('logo_path'))
       ->save();
+
+    if ($status === SAVED_NEW) {
+      $this->messenger()->addMessage($this->t('Aop feed "@name" successfully added.', [
+        '@name' => $this->entity->label(),
+      ]));
+    }
+    else {
+      $this->messenger()->addMessage($this->t('Aop feed "@name" was changed..', [
+        '@name' => $this->entity->label(),
+      ]));
+    }
+    $form_state->setRedirect('entity.aop_feed.collection');
+  }
+
+  /**
+   * Checks if the entity exists.
+   *
+   * @param string $id
+   *   The entity machine name.
+   *
+   * @return bool
+   *   TRUE if entity exists, FALSE otherwise.
+   *
+   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   */
+  public function exist($id) {
+    $entity = $this->entityTypeManager->getStorage('aop_feed')->getQuery()
+      ->condition('id', $id)
+      ->execute();
+    return (bool) $entity;
   }
 
 }
